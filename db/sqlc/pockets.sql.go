// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: pockets.sql

package db

import (
	"context"
)

const getPocketByID = `-- name: GetPocketByID :one
SELECT id, user_id, name, account, amount, created_at, updated_at FROM pockets WHERE id = $1
`

func (q *Queries) GetPocketByID(ctx context.Context, id int64) (Pocket, error) {
	row := q.db.QueryRowContext(ctx, getPocketByID, id)
	var i Pocket
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Account,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPocketByUserID = `-- name: GetPocketByUserID :many
SELECT id, user_id, name, account, amount, created_at, updated_at FROM pockets where user_id = $1
`

func (q *Queries) GetPocketByUserID(ctx context.Context, userID int64) ([]Pocket, error) {
	rows, err := q.db.QueryContext(ctx, getPocketByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Pocket{}
	for rows.Next() {
		var i Pocket
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Account,
			&i.Amount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
